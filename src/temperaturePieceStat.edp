/* LOADING MESH */

mesh Th("pieceMesh.msh");

int[int] walls = [1, 2, 3, 4, 5, 6, 7];
int window = 8;
int[int] heater = [9, 10, 11, 12];

/* DEFINITION PROBLEME DIFFUSION */
 
fespace Vh(Th,P1);     // P1 FE space
Vh uh,vh;              // unkown and test function. 

real k = 0.25;
real Text = -2.0;
real Theat = 50.0;
real qWall = -0.31;

real hHeat = 1.0;
real hWall = 1.0;

int configuration = 1;

// /* FIRST CONFIGURATION */

// func gWindow = Text;   // Dirichlet on window
// func gHeater = Theat;   // Dirichlet on heater
// func gWall = qWall/k;    // Neuman on walls

// problem laplace(uh, vh) =                    
//   int2d(Th)( dx(uh)*dx(vh) + dy(uh)*dy(vh) )
// - int1d(Th,walls)( vh*gWall ) // Neuman
// + on(window, uh=gWindow)  // Dirichlet
// + on(heater, uh=gHeater); // Dirichlet

/* SECOND CONFIGURATION */

// func gWindow = Text;   // Dirichlet on window
// func gWall = Text;   // Dirichlet on walls
// func gHeater = hHeat/k*(Theat-uh);    // Neuman on heater

// problem laplace(uh, vh) =                    
//   int2d(Th)( dx(uh)*dx(vh) + dy(uh)*dy(vh) )
// - int1d(Th, heater)( vh*gHeater ) // Neuman
// + on(window, uh=gWindow)          // Dirichlet
// + on(walls, uh=gWall);            // Dirichlet

// /* THIRD CONFIGURATION */

func gWindow = Text;   // Dirichlet on window
func gHeater = Theat;   // Dirichlet on wall
func gWall = hWall/k*(Text-uh);    // Neuman on walls

problem laplace(uh, vh) =                    
  int2d(Th)( dx(uh)*dx(vh) + dy(uh)*dy(vh) )
- int1d(Th, walls)( vh*gWall ) // Neuman
+ on(window, uh=gWindow)  // Dirichlet
+ on(heater, uh=gHeater); // Dirichlet

/* SOLVING */

laplace;

/* PLOTTING */

plot(uh, wait=true, value=true, fill=true);